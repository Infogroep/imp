#!/usr/bin/env ruby

puts 'application/json'

require 'json'
require 'optparse'
require_relative '../util/routing/routing'

module PlaylistQueue
	def self.queue
		spawn('util/player','playlist')
	end

	#TODO
	def self.enqueue
		#Add an item to the queue
	end

	def self.get_item(id)
		spawn('util/player', 'find_media', id)
	end

	def self.shuffle
		spawn('util/player', 'shuffle')
	end

	def self.magic_shuffle
		re = RegExp.new(JSON.parse(gets))
		queue = JSON.parse(`util/player playlist`)
		`util/player shuffle`
		queue.each do |media|
			media[:info].each do |k,v|
				if re.match(v)
					`util/player to_front #{media[:id]}`
					break
				end
			end
		end
	end

	def self.magic_shuffle(id)
		spawn('util/player', 'magic_shuffle', id)
	end

	def self.delete
		spawn('util/player', 'flush')
	end

	def self.delete_list
		ids = JSON.parse(gets)
		ids.each { |id| wait spawn('util/player','dequeue',id) }
	end

	def self.delete_item(id)
		spawn('util/player', 'dequeue', id)
	end

	def self.delete_regex
		re = RegExp.new(JSON.parse(gets))
		queue = JSON.parse(`util/player playlist`)
		queue.each do |media|
			media[:info].each do |k,v|
				if re.match(v)
					`util/player dequeue #{media[:id]}`
					break
				end
			end
		end
	end

	def self.to_front
		re = RegExp.new(JSON.parse(gets))
		queue = JSON.parse(`util/player playlist`)
		queue.each do |media|
			media[:info].each do |k,v|
				if re.match(v)
					`util/player to_front #{media[:id]}`
					break
				end
			end
		end
	end

	def self.to_front(id)
		spawn('util/player', 'to_front', id)
	end

	def self.enqueue_to_front(id)
		enqueue(id)
		to_front(id)
	end
end

Routing::route do |r|
	r.get { PlaylistQueue::queue }
	r.get [:id] { |b| PlaylistQueue::get_item b[:id] } 
	r.post [:item] { |b| PlaylistQueue::enqueue b[:id]}
	r.shuffle { PlaylistQueue::shuffle }
	r.magic_shuffle { PlaylistQueue::magic_shuffle }
	r.magic_shuffle [:id] { |b| PlaylistQueue::magic_shuffle b[:id] }
	r.delete { PlaylistQueue::delete }
	r.delete [:id] { |b| PlaylistQueue::delete_item b[:id] }
	r.delete_list { PlaylistQueue::delete_list }
	r.delete_regex { PlaylistQueue::delete_regex }
	r.to_front { PlaylistQueue::to_front }
	r.to_front [:id] { |b| PlaylistQueue::to_front b[:id] }
	r.enqueue_to_front [:id] { |b| PlaylistQueue::enqueue_to_front b[:id] }
end
